AWSTemplateFormatVersion: 2010-09-09

Description: This template creates stack for servers, auto scaling group and load balancers in AWS


Parameters:
    EnvironmentName:
        Description: Environment name for resources to be created
        Type: String
    
    AMiID:
        Description: AMI ID for Ubuntu 18.04
        Type: String

    InstanceType:
        Description: Server type
        Type: String

    InstanceMinSize:
        Description: Min server count for AutoScaling
        Type: String

    InstanceMaxSize:
        Description: Max server count for AutoScaling
        Type: String


Resources: 
#Create IAM Role and Policy
  EC2S3AllowRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  
  RolePolicies: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "EC2S3Allow"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "*"
            Resource: 'arn:aws:s3:::stanudagramfiles/*'
      Roles: 
        - Ref: "EC2S3AllowRole"

#Create Instance Profile to attach to Launch Configuration
  EC2S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: EC2S3AllowRole


#Create  security group for Application Load Balancer (ALB)
  ALBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALBSecurityGroup
      GroupDescription: Allow inbound anywhere to Load Balancer
      VpcId:
        Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALBSecGroup

#Create  security group Web Servers
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServersSecurityGroup
      GroupDescription: Alllow inbound traffic only from load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServerSecGroup


#Create Launch Configuration for Auto scaling Group with AMI and Instance type
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          sudo rm index.html
          sudo aws s3 cp s3://stanudagramfiles/index.html .

      ImageId: !Ref AMiID
      IamInstanceProfile: !Ref EC2S3InstanceProfile
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

#Create Auto Scaling Group with desired server count
  WebAppASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref InstanceMinSize
      MaxSize: !Ref InstanceMaxSize
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

#Create Application Load Balancer and listener rule for ALB
  WebAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: ALBSecGroup
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn: 
        Ref: WebAppALB
      Port: '80'
      Protocol: HTTP
  
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref ALBListener
        Priority: 1
  
  #Create Target Group to attach to Load Balancer
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

#Desired Output of Resources Created
Outputs:
    ALBUrl:
        Description: A reference to the DNS name of the Application Load Balancer
        Value: !Join [ "", [ http://, !GetAtt WebAppALB.DNSName ]]
